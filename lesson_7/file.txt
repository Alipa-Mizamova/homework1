1)что такое структуры данных?
ответ:Структуры данных – это, по сути, и есть структуры,
которые могут хранить некоторые данные вместе. Они используются для
хранения связанных данных. В Python существуют четыре
встроенных структуры данных: список, кортеж, словарь и множество.

2)Структуры данных — это структуры кода для хранения и организации данных,
которые упрощают изменение, навигацию и доступ к информации. Структуры данных определяют способ сбора данных,
функциональные возможности, которые мы можем реализовать, и отношения между данными.

Структуры данных используются практически во всех областях информатики и программирования, от операционных
систем до интерфейсной разработки и машинного обучения.

Структуры данных являются жизненно важными строительными блоками для эффективного решения реальных проблем.
Структуры данных — это проверенные и оптимизированные инструменты, которые дают вам удобную основу для
организации ваших программ. В конце концов, вам не нужно переделывать колесо (или конструкцию) каждый раз,
когда это нужно.

У каждой структуры данных есть задача или ситуация, для решения которой она наиболее подходит. Python имеет
4 встроенных структуры данных, списки, словари, кортежи и наборы. Эти встроенные структуры данных поставляются
с методами по умолчанию и негласной оптимизацией, которая упрощает их использование.

Большинство структур данных в Python являются их модифицированными формами или используют встроенные структуры
в качестве основы.

Список: структуры, похожие на массивы, которые позволяют сохранять набор изменяемых объектов одного и того же
 типа в переменную.
Кортеж: кортежи — это неизменяемые списки, то есть элементы не могут быть изменены. Он объявлен в круглых скобках
вместо квадратных.
Набор: наборы — это неупорядоченные коллекции, что означает, что элементы неиндексированы и не имеют установленной
последовательности. Они объявляются фигурными скобками.
Словарь (dict): Подобно хэш-карте или хеш-таблицам на других языках, словарь представляет собой набор пар
ключ / значение. Вы инициализируете пустой словарь пустыми фигурными скобками и заполняете его ключами и значениями,
разделёнными двоеточиями. Все ключи — уникальные неизменяемые объекты.


LinkedList<T> — это связанный список общего назначения. Он поддерживает перечислители и реализует ICollection
интерфейс, согласованный с другими классами коллекций в платформа .NET Framework.
LinkedList<T> предоставляет отдельные узлы типа LinkedListNode<T>, поэтому операции вставки и удаления являются
операциями O(1).
Мы можем удалить узлы и повторно вставить их либо в том же списке, либо в другом списке, что приводит к тому,
что дополнительные объекты в куче не выделены. Так как список также поддерживает внутреннее число, получение
Count свойства является операцией O(1).
Каждый узел в объекте LinkedList<T> имеет тип LinkedListNode<T>. Так как он вдвойне LinkedList<T> связан, каждый
узел указывает на Next узел и назад к Previous узлу.
Списки, содержащие ссылочные типы, лучше работают при создании узла и его значения одновременно.
LinkedList<T>null принимает в качестве допустимого Value свойства для ссылочных типов и разрешает повторяющиеся
значения.
Если значение LinkedList<T> пустое, First содержатся nullсвойства.Last
Класс LinkedList<T> не поддерживает связывание, разделение, циклы или другие функции, которые могут оставить
список в несогласованном состоянии. Список остается согласованным в одном потоке. Единственный многопоточный
сценарий, поддерживаемый LinkedList<T> многопоточных операций чтения.


HashMap — основан на хэш-таблицах, реализует интерфейс Map (что подразумевает хранение данных в виде пар ключ/значение).
Ключи и значения могут быть любых типов, в том числе и null. Данная реализация не дает гарантий относительно порядка
элементов с течением времени. Разрешение коллизий осуществляется с помощью метода цепочек.
С помощью Hash Map  можно найти значение по ключу, мгнонвенно...
